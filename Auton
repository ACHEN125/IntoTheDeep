/* Copyright (c) 2023 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.firstinspires.ftc.teamcode;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;


import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.NormalizedRGBA;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.SwitchableLight;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.hardware.camera.controls.ExposureControl;
import org.firstinspires.ftc.robotcore.external.hardware.camera.controls.GainControl;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.apriltag.AprilTagDetection;
import org.firstinspires.ftc.vision.apriltag.AprilTagLibrary;
import org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;


import java.util.List;
import java.util.concurrent.TimeUnit;


/*
 * This OpMode illustrates using a camera to locate and drive towards a specific AprilTag.
 * The code assumes a Holonomic (Mecanum or X Drive) Robot.
 *
 * For an introduction to AprilTags, see the ftc-docs link below:
 * https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html
 *
 * When an AprilTag in the TagLibrary is detected, the SDK provides location and orientation of the tag, relative to the camera.
 * This information is provided in the "ftcPose" member of the returned "detection", and is explained in the ftc-docs page linked below.
 * https://ftc-docs.firstinspires.org/apriltag-detection-values
 *
 * The drive goal is to rotate to keep the Tag centered in the camera, while strafing to be directly in front of the tag, and
 * driving towards the tag to achieve the desired distance.
 * To reduce any motion blur (which will interrupt the detection process) the Camera exposure is reduced to a very low value (5mS)
 * You can determine the best Exposure and Gain values by using the ConceptAprilTagOptimizeExposure OpMode in this Samples folder.
 *
 * The code assumes a Robot Configuration with motors named: leftfront_drive and rightfront_drive, leftback_drive and rightback_drive.
 * The motor directions must be set so a positive power goes forward on all wheels.
 * This sample assumes that the current game AprilTag Library (usually for the current season) is being loaded by default,
 * so you should choose to approach a valid tag ID.
 *
 * Under manual control, the left stick will move forward/back & left/right.  The right stick will rotate the robot.
 * Manually drive the robot until it displays Target data on the Driver Station.
 *
 * Press and hold the *Left Bumper* to enable the automatic "Drive to target" mode.
 * Release the Left Bumper to return to manual driving mode.
 *
 * Under "Drive To Target" mode, the robot has three goals:
 * 1) Turn the robot to always keep the Tag centered on the camera frame. (Use the Target Bearing to turn the robot.)
 * 2) Strafe the robot towards the centerline of the Tag, so it approaches directly in front  of the tag.  (Use the Target Yaw to strafe the robot)
 * 3) Drive towards the Tag to get to the desired distance.  (Use Tag Range to drive the robot forward/backward)
 *
 * Use DESIRED_DISTANCE to set how close you want the robot to get to the target.
 * Speed and Turn sensitivity can be adjusted using the SPEED_GAIN, STRAFE_GAIN and TURN_GAIN constants.
 *
 * Use Android Studio to Copy this Class, and Paste it into the TeamCode/src/main/java/org/firstinspires/ftc/teamcode folder.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list.
 *
 */


@Autonomous(name="AutoMode", group = "Autonomous")
public class Auton extends LinearOpMode{

    //WHEEL ENCODER STUFF
    static final double     COUNTS_PER_MOTOR_REV    = 112 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 5.51 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    // Adjust these numbers to suit your robot.

    //timer
    private static final ElapsedTime time = new ElapsedTime();



    //Wheels
    private DcMotor rightFrontDrive;
    private DcMotor leftFrontDrive;
    private DcMotor rightBackDrive;
    private DcMotor leftBackDrive;


//    //Servos
//    double clawMinPos = 0;
//    // intake rotating backwards and forwards
//    Servo clawRotate;
//    Servo claw;
//    static final double INCREMENT = 0.1;     // amount to slew servo each CYCLE_MS cycle
//    static final double MAX_POS2 = 0.8;     // Maximum rotational position
//    static final double MAX_POS = 1.0;     // Maximum rotational position
//    static final double MIN_POS = 0.2;     // Minimum rotational position
//    double position = MAX_POS; // Start at halfway position
//    double position2 = clawMinPos; // Start at halfway position








    //motors for turn & viper slide
    private DcMotor viperSlide;
    private DcMotor rotate1;
    private DcMotor rotate2;// period of each cycle
    int viperMax = 3100;
    int min =0;
    int rotateMax = 150;
    int viperPosition = min;
    int rotatePosition=min;
    int viperIncrement = 20;
    int rotateIncrement = 1;

    int phase=0;



    public void runOpMode()
    {


        // Initialize the Apriltag Detection process
        initialize();


        // if (USE_WEBCAM)
        //     setManualExposure(6, 250);  // Use low exposure time to reduce motion blur


        // Wait for driver to press start
        telemetry.addData("Camera preview on/off", "3 dots, Camera Stream");
        telemetry.addData(">", "Touch START to start OpMode");
        telemetry.update();
        waitForStart();


        while (!isStopRequested()&&opModeIsActive())
        {
            //displays the elapsed time
            telemetry.addData("Time", "%.2f", time.time());

            //BLUE CODE


            //turn left
            //encoderDrive(1,-100,100, 100,-100,10);

            //starts with a block WITH HOOK
            // starts in right starting place
            //phase0: goes forward and a little bit left then hangs block on bar
            //50 is 6 inches
            //1 inch = 8.3
            if(time.seconds()>=25) {
                if (phase == 0) {
                    //forward->strafe left
                    encoderDrive(1, -100, -100, 100, 100, 2); // strafe a little left
                    encoderDrive(1, 90, 90, 90, 90, 2); // forward
                    // hang up block here as well, I didn't code for it
                    phase = 1;
                } else if (phase == 1) { //phase1: go back a little, then strafe right towards blocks on right side
                    encoderDrive(1, -30, -30, -30, -30, 1); // front left wheel tweaks out on this one because it's special ed
                    encoderDrive(1, 400, 400, -400, -400, 2); // probably need to make separate variables to change how much right it goes each time, because each block is at a different place
                    phase = 2;
                } else if (phase == 2) { //phase2: pick up block
                    // pick up block
                    phase = 3;
                } else if (phase == 3) { // phase3: move backwards to zone to attach specimen
                    encoderDrive(1, -300, -300, -300, -300, 2); // moving back
                    // make claw let go of block (idk if you're allowed to touch robot)
                    // make robot wait for a bit
                    // make claw grab block (idk if you're allowed to touch robot)
                    phase = 4;
                } else if (phase == 4) { //phase4: strafe left back to spawn position, then move forward to bar
                    encoderDrive(1, -400, -400, 400, 400, 2); // probably need separate variables to get back to bar from each block position
                    encoderDrive(1, 90, 90, 90, 90, 2); // move forward to bar
                    phase = 5;
                } else if (phase == 5) { //phase5: hang block on bar
                    // hang block on bar
                    phase = 1; // repeat steps from phase 1 to get next blocks
                }
            }
            else{
                //hang or dock
                
            }

            //phase0: move forward, hang block on bar
            //phase1: go back a little, then strafe right towards blocks on right side
            //phase2: pick up block
            //phase3: move back to attach zone, stop
            //phase4: strafe left to spawn position, then move forward to bar
            //phase5: hang block on bar, restart from phase 1
            // docking not included in this
            telemetry.addData("phase:",phase);


        }// end of while loop
    }//end of runOpMode


    /**
     * Move robot according to desired axes motions
     * <p>z
     * Positive X is forward
     * <p>
     * Positive Y is strafe left
     * <p>
     * Positive Yaw is counter-clockwise
     */

    private void initialize() {




        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must match the names assigned during the robot configuration.
        // step (using the FTC Robot Controller app on the phone).
        leftFrontDrive  = hardwareMap.get(DcMotor.class, "FrontLeftWheel");
        rightFrontDrive = hardwareMap.get(DcMotor.class, "FrontRightWheel");
        leftBackDrive  = hardwareMap.get(DcMotor.class, "BackLeftWheel");
        rightBackDrive = hardwareMap.get(DcMotor.class, "BackRightWheel");


        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // When run, this OpMode should start both motors driving forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);

        leftBackDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBackDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftFrontDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightFrontDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //init for servo clawRotate
//        clawRotate = hardwareMap.get(Servo.class,"clawRotate");
//        clawRotate.setDirection(Servo.Direction.FORWARD);

        //initialising servos (for claw)
//        claw = hardwareMap.get(Servo.class, "claw");


        // initialising viper slide
        viperSlide = hardwareMap.get(DcMotor.class, "viperSlide");
        viperSlide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        viperSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        viperSlide.setDirection(DcMotorSimple.Direction.FORWARD);





        //changing directions of viper slide
        rotate1 = hardwareMap.get(DcMotor.class, "rotate1");
        rotate2 = hardwareMap.get(DcMotor.class, "rotate2");
        rotate1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rotate2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rotate1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rotate2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rotate1.setDirection(DcMotorSimple.Direction.FORWARD);
        rotate2.setDirection(DcMotorSimple.Direction.REVERSE);

        //brake mode
        viperSlide.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rotate1.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rotate2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);




    }//end of intake rotate

    public void encoderDrive(double speed,
                             double frontLeftInches, double backRightInches, double frontRightInches, double backLeftInches,
                             double timeoutS) {
        int frontLeftTarget;
        int frontRightTarget;
        int backLeftTarget;
        int backRightTarget;

        // Ensure that the OpMode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            frontLeftTarget = leftFrontDrive.getCurrentPosition() + (int) (frontLeftInches* COUNTS_PER_INCH);
            frontRightTarget = rightFrontDrive.getCurrentPosition() + (int) (frontRightInches * COUNTS_PER_INCH);
            backLeftTarget = leftBackDrive.getCurrentPosition() + (int) (backLeftInches * COUNTS_PER_INCH);
            backRightTarget = rightBackDrive.getCurrentPosition() + (int) (backRightInches* COUNTS_PER_INCH);
            leftFrontDrive.setTargetPosition(frontLeftTarget);
            rightFrontDrive.setTargetPosition(frontRightTarget);
            leftBackDrive.setTargetPosition(backLeftTarget);
            rightBackDrive.setTargetPosition(backRightTarget);

            // Turn On RUN_TO_POSITION
            leftFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            leftBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            rightBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            time.reset();
            leftFrontDrive.setPower(Math.abs(speed));
            rightFrontDrive.setPower(Math.abs(speed));
            leftBackDrive.setPower(Math.abs(speed));
            rightBackDrive.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while(opModeIsActive() &&
                    (time.seconds() < timeoutS) &&
                    (leftFrontDrive.isBusy() && rightFrontDrive.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Running to", " %7d :%7d", frontLeftTarget, frontRightTarget);
                telemetry.addData("Currently at", " at %7d :%7d", rightBackDrive.getCurrentPosition(), rightFrontDrive.getCurrentPosition());
                telemetry.update();
            }

            // Stop all motion; //no
            leftFrontDrive.setPower(0);
            rightFrontDrive.setPower(0);
            leftBackDrive.setPower(0);
            rightBackDrive.setPower(0);

            // Turn off RUN_TO_POSITION
            leftFrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightFrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftBackDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightBackDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


            sleep(250);   // optional pause after each move.
        }
    }


    public void extend() {


        //viperSlide.setTargetPosition(viperSlide.getCurrentPosition());
        //viperSlide2.setTargetPosition(viperSlide.getCurrentPosition());
        //sets power and pos
        if (viperPosition<=viperMax) {
//            if(rotatePosition>=rotateMax){
//                //extends half if not fully erect
//                viperPosition=viperMax/3;
//                viperPow=0.5;
//                //viperSlide2.setTargetPosition(max/3);
//            }
//            else{
            viperPosition += viperIncrement;
            //viperSlide2.setTargetPosition(max);
            //extends full way
//            }
        }

        //runs to position, intended target
        viperSlide.setTargetPosition(viperPosition);
        viperSlide.setPower(0.5);
        viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //viperSlide2.setPower(0.75);
        // viperSlide2.setMode(DcMotor.RunMode.RUN_TO_POSITION);




        // Display the current value
        telemetry.addData("viper tick:", "%7d", viperSlide.getCurrentPosition());
    }//end of extend

    public void retract() {

        if (viperPosition>=min) {
            //extend down
            viperPosition-=viperIncrement;
            //viperSlide2.setTargetPosition(min);
            //power=-0.25;
        }


        //runs to position, intended target
        viperSlide.setTargetPosition(viperPosition);
        viperSlide.setPower(0.5);
        viperSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //viperSlide2.setPower(0.75);
        // viperSlide2.setMode(DcMotor.RunMode.RUN_TO_POSITION);


        // Display the current value
        telemetry.addData("viper tick:", "%7d", viperSlide.getCurrentPosition());
    }//end of extend


//    public void intake() {
//        // slew the servo, according to the rampUp (direction) variable.
//        if (gamepad2.dpad_up) {
//            // Keep stepping up until we hit the max value.
//            position += INCREMENT;
//            if (position >= MAX_POS2) {
//                position = MAX_POS2;
//            }
//        }
//        else if(gamepad2.dpad_down){
//            // Keep stepping down until we hit the min value.
//            position -= INCREMENT;
//            if (position <= MIN_POS) {
//                position = MIN_POS;
//            }
//        }
//
//
//
//
//        // Set the servo to the new position and pause;
//        claw.setPosition(position);
//
//        // Display the current value
//        telemetry.addData("Servo Position", "%5.2f", position);
//
//
//
//
//    }//end of intake








//    public void rotateIntake() {
//        // slew the servo, according to the rampUp (direction) variable.
//        if (gamepad2.right_bumper) {
//            // Keep stepping up until we hit the max value.
//            position2 += INCREMENT;
//            if (position2 >= MAX_POS) {
//                position2 = MAX_POS;
//            }
//        }
//        else if(gamepad2.left_bumper){
//            // Keep stepping down until we hit the min value.
//            position2 -= INCREMENT;
//            if (position2 <= clawMinPos) {
//                position2 = clawMinPos;
//            }
//        }
//
//
//        // Set the servo to the new position and pause;
//        clawRotate.setPosition(position2);
//
//
//        // Display the current value
//        telemetry.addData("Servo Position", "%5.2f", position2);
//    }//end of rotateIntake
//
//




    //brings the claw up/down
    public void changeOrientationUp() {
        //int pos1 = rotate1.getCurrentPosition();// encoder position, determines max height
        //int pos2 = rotate2.getCurrentPosition();// encoder position, determines max height
        //rotatePosition
        //rotate1.setTargetPosition(rotate1.getCurrentPosition());
        //rotate2.setTargetPosition(rotate2.getCurrentPosition());
        // Ramp the motors, according to the rampUp variable.
        if (rotatePosition <=rotateMax) {
            //rotate1.setTargetPosition(max2);
            //rotate2.setTargetPosition(max2);
            rotatePosition += rotateIncrement;
            //pos2=max2;
            //power = 0.25;
        }
//            rotatePow=0;
//        }


        rotate1.setTargetPosition(rotatePosition);
        rotate2.setTargetPosition(rotatePosition);
        rotate1.setPower(1);
        rotate2.setPower(1);
        rotate1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rotate2.setMode(DcMotor.RunMode.RUN_TO_POSITION);





        // Display the current value
        telemetry.addData("Encoder tick1", "%5d", rotate1.getCurrentPosition());
        telemetry.addData("Encoder tick2", "%5d", rotate2.getCurrentPosition());
        telemetry.addData("rotatePos", "%5d", rotatePosition);
        telemetry.addData("Power1", "%5.2f", rotate1.getPower());
        telemetry.addData("Power2", "%5.2f", rotate2.getPower());
    }//changeOrientation

    public void changeOrientationDown(){
        if (rotatePosition >=min) {
            rotatePosition -= rotateIncrement;
            //rotate1.setTargetPosition(min);
            //rotate2.setTargetPosition(min);
            // power=-0.25;
        }
        rotate1.setTargetPosition(rotatePosition);
        rotate2.setTargetPosition(rotatePosition);
        rotate1.setPower(1);
        rotate2.setPower(1);
        rotate1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rotate2.setMode(DcMotor.RunMode.RUN_TO_POSITION);





        // Display the current value
        telemetry.addData("Encoder tick1", "%5d", rotate1.getCurrentPosition());
        telemetry.addData("Encoder tick2", "%5d", rotate2.getCurrentPosition());
        telemetry.addData("rotatePos", "%5d", rotatePosition);
        telemetry.addData("Power1", "%5.2f", rotate1.getPower());
        telemetry.addData("Power2", "%5.2f", rotate2.getPower());
    }
}// Auto extends LinearOpMode
